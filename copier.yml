_min_copier_version: "9.9.1"

_jinja_extensions:
  - copier_template_extensions.TemplateExtensionLoader
  - extensions/faker.py:FakerExtension
  - jinja2.ext.debug

_subdirectory: template

# Control if debug mode is enabled
debug_mode:
  type: bool
  default: true
  when: false

# debug_question:
#   type: str
#   help: "{% debug %}"
#   default: ""
#   when: "{{ debug_mode }}"

# Auto-detect the destination folder name as the project name (hidden prompt).
project_name:
  type: str
  default: "{{ _copier_conf.dst_path | basename }}"
  when: false

# Top-level Python package (snake_case), pre normalization.
package_slug_pre:
  type: str
  default: "top_package"
  help: "Enter the Top-level Python package name"
  validator: >-
    {% if not (package_slug_pre | trim | lower | regex_search('^[a-z_][a-z0-9_]*$')) %}
    The package name must start with a letter or underscore, followed by any letters, digits, or underscores.
    {% endif %}

# Top-level Python package (snake_case), post normalization.
package_slug:
  type: str
  default: "{{ package_slug_pre | trim | lower }}"
  when: false

# Copyright owner name, pre normalization.
author_name_pre:
  type: str
  default: "Jane Doe"
  help: "Enter your name (for copyright notices) or leave empty"
  validator: >-
    {# normalize #}
    {%- set name = author_name_pre | trim -%}
    {% if not (name | regex_search('^[A-Za-zÀ-ÖØ-öø-ÿ0-9&.,\'\\-\\s]+$')) %}
    Your name must contain only letters, digits, spaces, and allowed punctuation.
    {% endif %}

# Copyright owner name, post normalization.
author_name:
  type: str
  default: "{{ author_name_pre | trim | title }}"
  when: false

author_email_pre:
  type: str
  placeholder: "you@example.com"
  default: ""
  help: |-
    Enter your email (or leave empty).
    Rules:
      • Exactly one '@' separating local and domain.
      • Local part: 1–64 chars; letters/digits/_/+/- allowed; dots only between segments
        (no leading, trailing, or consecutive dots).
      • Domain part: 1–255 chars; consists of dot-separated labels.
        Each label: letters/digits/hyphen, 1–63 chars, no leading/trailing hyphen.
    Examples:
      valid   → alice.smith+dev@example-co.uk
      invalid → .alice@ex.com (leading dot), alice@@ex.com (two @),
                alice@-ex.com (label starts with '-')
                alice@ex..com (consecutive dots)
  validator: >-
    {# normalize #}
    {%- set addr = author_email_pre | trim | lower -%}

    {#- allow empty input -#}
    {%- if addr -%}
      {#- must contain exactly one '@' -#}
      {%- set parts = addr.split('@') -%}
      {%- if parts | length != 2 -%}
      Your email must contain exactly one '@' (separating local and domain parts)
      {%- else -%}
        {%- set local = parts[0] -%}
        {%- set domain = parts[1] -%}

        {# local length 1-64 #}
        {%- if local | length == 0 or local | length > 64 -%}
        The local part of your email must be 1-64 characters.
        {%- endif -%}

        {#- local charset + dot rules -#}
        {%- if not (local | regex_search('^[a-z0-9_+-]+(?:\\.[a-z0-9_+-]+)*$')) -%}
        The local part of your email may use letters/digits/_/+/-. It must have dots only between segments (no leading/trailing/consecutive dots).
        {%- endif -%}

        {# domain length 1-255 #}
        {%- if domain | length == 0 or domain | length > 255 -%}
        The domain part of your email must be 1-255 characters.
        {%- endif -%}

        {# domain labels: [a-z0-9-], 1-63 each, no leading/trailing '-', at least one dot #}
        {%- if not (domain | regex_search('^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?$')) -%}
        The domain part of your email must have dot-separated labels using letters/digits/hyphen only. It must have no leading/trailing hyphen.
        {%- endif -%}
      {%- endif -%}
    {%- endif -%}

# 1a) Email (normalized) – hidden, auto-filled
author_email:
  type: str
  when: false
  default: "{{ author_email_pre | trim | lower }}"

# 2) GitHub username (optional) – ask the user
author_github_pre:
  type: str
  help: "Enter your GitHub username or leave empty"
  placeholder: "your-github-username"
  default: ""
  validator: >-
    {#- normalize -#}
    {%- set name = author_github_pre | trim | lower -%}
    {%- if name and not (name | regex_search('^[a-z0-9](?:[a-z0-9]|-(?=[a-z0-9])){0,38}$')) -%}
    GitHub username may only contain letters, digits, and single hyphens. It must have no leading/trailing hyphen, no consecutive hyphens, and be at most 39 chars.
    {%- endif -%}

# 2a) GitHub username (normalized) – hidden, auto-filled
author_github:
  type: str
  when: false
  default: "{{ author_github_pre | trim | lower }}"

# Optional organization (some BSD variants mention it; safe to leave empty), pre normalization.
organization_pre:
  type: str
  placeholder: "Your Organization"
  default: ""
  help: "Enter the organization name (optional; leave empty if not applicable)"
  validator: >-
    {% if organization_pre and not (organization_pre | trim | regex_search('^[A-Za-zÀ-ÖØ-öø-ÿ0-9&.,\'\\-\\s]+$')) %}
    The organization name must contain only letters, digits, spaces, and allowed punctuation.
    {% endif %}

# Optional organization (some BSD variants mention it; safe to leave empty), post normalization.
organization:
  type: str
  default: "{{ organization_pre | trim }}"
  when: false

# Choose the license (must match the filenames in licenses/)
license_key:
  type: str
  help: "Which license to include"
  choices:
    - ["MIT License", mit]
    - ["Apache License 2.0", apache-2.0]
    - ["BSD 3-Clause 'New' or 'Revised' License", bsd-3-clause]
    - ["GNU General Public License v3.0", gpl-3.0]
    - ["GNU Lesser General Public License v3.0", lgpl-3.0]
    - ["GNU Affero General Public License v3.0", agpl-3.0]
    - ["Mozilla Public License 2.0", mpl-2.0]
    - ["Eclipse Public License 2.0", epl-2.0]
    - ["BSD 2-Clause 'Simplified' License", bsd-2-clause]
    - ["The Unlicense", unlicense]
  default: mit

# compute the human-friendly name based on the key
license_name:
  type: str
  when: false
  default: >-
    {{
      {
        'mit': 'MIT License',
        'apache-2.0': 'Apache License 2.0',
        'bsd-3-clause': 'BSD 3-Clause License',
        'bsd-2-clause': 'BSD 2-Clause License',
        'gpl-3.0': 'GNU General Public License v3.0',
        'lgpl-3.0': 'GNU Lesser General Public License v3.0',
        'agpl-3.0': 'GNU Affero General Public License v3.0',
        'mpl-2.0': 'Mozilla Public License 2.0',
        'epl-2.0': 'Eclipse Public License 2.0',
        'unlicense': 'The Unlicense'
      }[license_key]
    }}

# Year to include in LICENSE files
license_year_pre:
  type: str
  default: "{{ '%Y' | strftime }}"
  help: "Enter the Copyright year"
  validator: >-
    {%- set curr_year = ('%Y' | strftime | int) -%}
    {%- if not (license_year_pre | int) -%}
    The license year must be a valid number.
    {% elif (license_year_pre | int) < 1970 or (license_year_pre | int) > curr_year %}
    The license year must be between 1970 and the current year ({{ curr_year }}).
    {% endif %}

license_year:
  type: int
  default: "{{ license_year_pre | int }}"
  when: false

# Whether to create a new requirements.txt file
edit_deps:
  type: bool
  help: "Create requirements.txt file from scratch?"
  default: true
  choices:
    - ["Yes - create from scratch", true]
    - ["No - keep the existing file (if any)", false]

dependencies:
  type: str
  help: "Pick PyPI dependencies to install"
  when: "{{ edit_deps }}"
  choices:
    - numpy
    - pandas
    - matplotlib
    - scipy
    - scikit-learn
    - pipreqs
    - pytest
    - seaborn
    - jupyterlab
    - notebook
    - ipykernel
    - ipywidgets
    - jupyterlab-widgets
  multiselect: true
  default: []

custom_deps:
  type: str
  default: ""
  help: |-
    Add comma-separated PyPI package names (without version specs) to install additionally.
    Expected a comma-separated list of PyPI distribution names:
      - Only alphanumeric plus ".", "_" or "-"
      - Must start and end with an alphanumeric
      - At most one optional ASCII space after each comma
      - Optional single trailing comma after the last package name
      - Optional whitespace symbols (spaces, tabs) arounfd the entire string (will be trimmed)
    "pip" and "pip3" must not be included here (they are always installed).
  when: "{{ edit_deps }}"
  validator: |-
    {%- set deps = (custom_deps | trim) -%}
    {%- set deps = deps | replace(', ', ',') -%}
    {%- set deps = deps.rstrip(',') -%}
    {%- set deps = deps | regex_replace('[._-]+', '-') -%}
    {%- set deps = (deps | lower) -%}
    {% set NAME = '([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])' %}
    {% set PAT  = '^' ~ NAME ~ '(?:,' ~ NAME ~ ')*$' %}
    {% if deps and not (deps | regex_search(PAT)) %}
    Invalid value for your custom dependencies list.
    {% elif ((',' ~ deps ~ ',') | regex_search(',pip(3)?,') ) %}
    "pip" and "pip3" must not be included here.
    {% endif %}

unique_deps:
  type: yaml
  when: false
  default: >-
    {%- set raw_custom = (custom_deps | trim) -%}
    {%- set raw_custom = raw_custom | replace(', ', ',') -%}
    {%- set raw_custom = raw_custom.rstrip(',') -%}
    {%- set raw_custom = raw_custom | regex_replace('[._-]+', '-') -%}
    {%- set raw_custom = (raw_custom | lower) -%}
    {%- set custom_list = raw_custom.split(',') if raw_custom else [] -%}
    {%- set merged = dependencies + custom_list -%}
    {%- set merged = merged | unique | list -%}
    {%- set filtered = merged | reject('in', ['pip', 'pip3']) | list -%}
    {{ filtered }}

# debug_question:
#   type: str
#   help: |-
#     edit_deps = {{ edit_deps }}
#     unique_deps = {{ unique_deps }}
#     unique_deps_len = {{ unique_deps | length }}
#     version_spec_deps_when = {{ edit_deps and (unique_deps | length) > 0 }}
#   default: ""
#   when: "{{ debug_mode }}"

version_spec_deps:
  type: yaml
  help: "Pick the dependencies you want to add a version specifier for (others stay unspecified, i.e. latest stable version)."
  when: "{{ edit_deps and (unique_deps | length) > 0 }}"
  choices: |-
    {% if unique_deps %}
    {%- for dep in unique_deps -%}
    -  "{{ dep }}"
    {% endfor -%}
    {% else %}
    []
    {% endif %}
  multiselect: true
  default: []

setup_venv:
  type: bool
  help: "Set up a virtual environment (i.e. .venv/) for the project (if not already present) and install dependencies (if there are any to install)?"
  default: true
  choices:
    - ["Yes - create a virtual environment and install dependencies", true]
    - ["No - skip virtual environment setup", false]

upgrade_deps:
  type: bool
  help: "Upgrade all dependencies (if there are any to install) according to version specifiers (instead of only installing missing)?"
  default: false
  when: "{{ setup_venv }}"
  choices:
    - ["Yes - upgrade according to version specifiers", true]
    - ["No - install only missing", false]


# Files or directories that exist inside the project template that are to be excluded
_exclude:
  # -------------------------------------
  # Conditional requirements.txt file
  - "{% if not edit_deps -%}requirements.txt{% endif %}"

  # -------------------------------------
  # Byte-compiled / optimized files
  - "**/__pycache__"
  - "**/*.py[cod]"
  - "**/*$py.class"

  # -------------------------------------
  # Virtual environments (Windows-style and Unix-style)
  - "**/.venv"
  - "**/venv"
  - "**/env"
  - "**/ENV"
  - "**/env.bak"
  - "**/venv.bak"

  # -------------------------------------
  # OS junk files
  - "**/.DS_Store"
  - "**/Thumbs.db"

  # -------------------------------------
  # Test / coverage / cache
  - "**/.tox"
  - "**/.nox"
  - "**/.pytest_cache"
  - "**/.coverage"
  - "**/.coverage.*"
  - "**/.cache"
  - "**/nosetests.xml"
  - "**/coverage.xml"
  - "**/*.cover"
  - "**/*.py,cover"
  - "**/.hypothesis"

  # -------------------------------------
  # Git local repository
  - "**/.git"

  # -------------------------------------
  # Copier configuration files
  - "**/copier.*"

# Tasks to run before finishing the writing of the project
_tasks:
  - command: 
      [
        "python3", 
        "{{ _copier_conf.src_path }}/tasks/reqs_specs_file_setup.py",
        "{{ version_spec_deps | join(',') }}",
      ]
    when: "{{ (version_spec_deps | length) > 0 }}"
  - command: ["python3", "{{ _copier_conf.src_path }}/tasks/venv_setup.py"]
    when: "{{ setup_venv and not upgrade_deps }}"
  - command:
      [
        "python3",
        "{{ _copier_conf.src_path }}/tasks/venv_setup.py",
        "--upgrade",
      ]
    when: "{{ setup_venv and upgrade_deps }}"
